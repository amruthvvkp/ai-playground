[tool.poetry]
name = "ai-playground"
version = "0.1.0"
description = "This repository contains various code snippets and projects that I created while learning AI concepts and techniques. It covers topics such as machine learning, computer vision, natural language processing, and more. This is my personal playground for experimenting with AI and improving my skills."
authors = ["Amruth Vithala <amruthvvkp@gmail.com>"]
readme = "README.md"
packages = [{ include = "src" }]
exclude = ["datascience_principles"]

[tool.poetry.dependencies]
python = "^3.11"
dash = "^2.14.2"
pandas = "^2.2.0"
openpyxl = "^3.1.2"
pyarrow = "^15.0.0"
tabulate = "^0.9.0"
matplotlib = "^3.8.2"
scipy = "^1.12.0"

[tool.poetry.group.dev.dependencies]
interrogate = "^1.5.0"
jupyter = "^1.0.0"
isort = "^5.13.2"
ruff = "^0.1.14"
pre-commit = "^3.6.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.interrogate]
ignore-init-method = true
ignore-init-module = true
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 99.9
exclude = ["docs", "build"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 2
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false
generate-badge = "."
badge-format = "svg"

[tool.isort]
profile = "black"
known_third_party = ["pydantic", "prefect"]
skip = [".gitignore", ".dockerignore"]
extend_skip = [".md", ".json"]
line_length = 120
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
ensure_newline_before_comments = true
use_parentheses = true
py_version = 310

[tool.black]
# https://github.com/psf/black
line-length = 120
target_version = ['py310']
exclude = '''
(
  /(
    \.git
    | \.mypy_cache
    | \.pytest_cache
    | htmlcov
    | venv
    | .venv
  )/
)
'''

[tool.mypy]
strict = false
plugins = ["pydantic.mypy"]

follow_imports = "skip"
warn_redundant_casts = true
swarn_unused_ignores = true
disallow_any_generics = true
no_implicit_reexport = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.flake8]
max-line-length = 120
extend-ignore = ["E203"]
max-complexity = 10

[tool.ruff]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    # "I",  # isort
    "B", # flake8-bugbear
]
ignore = [
    "E501", # line too long, handled by black
    "B904", # Within an except clause, raise exceptions with raise ... from err or raise ... from None to distinguish them from errors in exception handling
    "B008", # Do not perform function call {name} in argument defaults
    "B006", # Do not use mutable data structures for argument defaults
    "C901", # too complex
]

respect-gitignore = true
src = ["aws_client"]

# Same as Black.
line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.10.
target-version = "py310"
fix = true

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.isort]
order-by-type = true
combine-as-imports = true
force-sort-within-sections = true
lines-after-imports = 1
force-single-line = false
split-on-trailing-comma = false
known-third-party = ["pydantic"]
